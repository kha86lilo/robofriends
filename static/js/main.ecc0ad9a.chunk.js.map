{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","reducers.js","index.js","constants.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","item","components_Card","key","SearchBox","onChange","aria-label","type","placeholder","Scroll","props","style","overflowY","height","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearch","event","setState","searchTxt","target","value","state","robotsArray","_this2","fetch","then","result","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","initialState","searchField","initialStateRequestRobots","isPending","error","rootReducer","createLogger","combineReducers","searchRobots","arguments","undefined","action","objectSpread","payload","requestRobots","store","createStore","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecc0ad9a.chunk.js","sourcesContent":["import React  from 'react'; \r\nconst Card = ({name, email, id})=> {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 tc'>\r\n      <img alt='Robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from './Card'\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n        {robots.map(item => <Card key={item.id} id={item.id} name={item.name} email={item.email} />) }\r\n    </div>\r\n  );\r\n}; \r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({onChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label = \"Search Robots\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n  <div style={{overflowY:'scroll', height:'500px',border:'1px solid black',}}>\r\n        {props.children}\r\n  </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robotsArray: [],\r\n      searchTxt: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(result => result.json())\r\n      .then(users => this.setState({ robotsArray: users }));\r\n  }\r\n  onSearch = event => {\r\n    this.setState({ searchTxt: event.target.value });\r\n  };\r\n  render() {\r\n    const { searchTxt, robotsArray } = this.state;\r\n\r\n    const filteredRobots = this.state.robotsArray.filter(robot =>\r\n      robot.name.toLowerCase().includes(searchTxt.toLowerCase())\r\n    );\r\n\r\n    return !robotsArray.length ? (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Loading</h1>\r\n      </div>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robo Friends</h1>\r\n        <SearchBox onChange={this.onSearch} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants\";\r\nconst initialState = {\r\n  searchField: \"\"\r\n};\r\n\r\nconst initialStateRequestRobots = {\r\n    isPending: false,\r\n    robots:[],\r\n    error:''\r\n  };\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRequestRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload,isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload ,isPending: false};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"," \r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'; \r\nimport {Provider} from 'react-redux'; \r\nimport { createStore ,applyMiddleware, combineReducers} from \"redux\";\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport { createLogger } from \"redux-logger\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots});\r\nconst store = createStore(rootReducer );\r\nReactDOM.render(\r\n<Provider  store={store}><App/></Provider>, document.getElementById('root'));\r\n \r\nserviceWorker.unregister();\r\n ","export  const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport  const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport  const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport  const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';"],"sourceRoot":""}